import org.mozilla.javascript.ErrorReporter;
import org.mozilla.javascript.EvaluatorException;
import com.yahoo.platform.yui.compressor.JavaScriptCompressor

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.yahoo.platform.yui:yuicompressor:2.4.6'
    }
}


// compile all of the HTML templates into pre-compiled Javascript templates
task compileTemplates 
compileTemplates.TemplateAgent = "Handlebars"
compileTemplates.appName = "MyApp"

compileTemplates.doFirst {
    def files = gatherHTMLFiles()
    def templateFile = new File("js/src/templates/templates.js")
    
    templateFile.withWriter { writer->

        files.each { file ->
            println "Compiling ${file.plainName()}"
            writer.write("${compileTemplates.appName}.Templates.${file.plainName()}=${compileTemplates.TemplateAgent}.compile(\"")
            writer.write(compileHTML(file.text))
            writer.write("\");\n")

        }
    }
}


// compress and minify all of the javascript into one file
task compress(dependsOn: compileTemplates) {

    baseJS = "js/src/app.js"//your 'root' file which sets up the namespace

    doFirst {
        
        def files = gatherJavaScriptFiles([new File(compress.baseJS)] as Set)
        def appFile = new File("js/app-min.js")

        appFile.withWriter { writer->
            files.each { file->
                file.withReader { reader->
                    println "Compressing file ${file}"
                    def compressor = new JavaScriptCompressor(reader, new SimpleErrorReporter())
                    compressor.compress(writer, 1000, true, false, true, false)
                }
            }
        }
    }
}

//meta class a plainFile name on File

File.metaClass.plainName = {->
    String name = delegate.getName()
    int pos = name.indexOf(".")
    if (pos > 0) {
        name = name[0..(pos-1)]
    }
    name
}

//functions

List gatherJavaScriptFiles (Set defaultSet) {
    gatherReadeableFilesByType(defaultSet, ".js")
}

List gatherHTMLFiles(Set defaultSet) {
    gatherReadeableFilesByType(defaultSet, ".html")
}

List gatherReadeableFilesByType(Set files, String type) {
    if(!files) {
        files = [] as Set
    }
    new File("js/src").traverse() { file->
        if (file.isFile() && file.canRead() && file.getName().endsWith(type)) {
            files.add(file)
        }
    }
    files.toList()  
}

// converts a given markup string and converts it into an excaped javascript string, ready for compiling
String compileHTML(String text) {

    text.trim().replace("\n", "").replace("\"", "\\\"");
}
// the YUICompressor requires a class which implements ErrorReporter. 
class SimpleErrorReporter implements ErrorReporter {
    public void warning(String message, String sourceName, int line, String lineSource, int lineOffset) {
        println("WARNING: ${message}")
        println("Run with --info for more information")
    }
 
    public void error(String message, String sourceName, int line, String lineSource, int lineOffset) {
        println("ERROR: ${message}")
        println("Run with --info for more information")
    }
 
    public EvaluatorException runtimeError(String message, String sourceName, int line, String lineSource, int lineOffset) {
        error(message, sourceName, line, lineSource, lineOffset);
        return new EvaluatorException(message);
    }
}
